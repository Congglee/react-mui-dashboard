---
globs: *.ts,*.tsx
description: Enforce absolute '@/" imports, disallow relative imports, and require kebab-case filenames for components/pages
---

# Import and Naming Policy (Absolute alias '@/')

This rule standardizes how modules are imported and how component/page files are named across the codebase.

## Absolute imports (required)

- All internal imports must use the absolute alias starting with `@/`.
- Do not use any relative import paths like `./`, `../`, or `../../` for app code.

Examples:

```ts
// ✅ Do
import NavItem from '@/components/dashboard/nav-item'
import AnalyticsIcon from '@/components/icons/analytics-icon'

// ❌ Don't
import NavItem from '../../components/dashboard/nav-item'
import AnalyticsIcon from '../icons/analytics-icon'
```

## File naming for components and pages (kebab-case)

- Component and page filenames must be in kebab-case: lowercase words separated by hyphens.
- Examples of valid names: `nav-item.tsx`, `help-icon.tsx`, `user-settings.tsx`.
- Avoid PascalCase or camelCase filenames for these files.

```text
✅ Allowed:  nav-item.tsx, help-icon.tsx, users-list.tsx
❌ Avoid:    NavItem.tsx, HelpIcon.tsx, navItem.tsx
```

## Consistency requirements

- When creating or modifying files, ensure import paths and filenames follow this policy.
- If you touch a file that uses relative imports, convert them to `@/` within the same edit.
- Keep import paths stable and avoid deep relative traversals entirely.

## Project configuration for the '@/" alias

Ensure the alias is configured in both TypeScript and Vite so editors and builds resolve `@/` correctly.

- TypeScript: update [tsconfig.json](mdc:tsconfig.json)

```json
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["app/*"]
    }
  }
}
```

- Vite: update [vite.config.ts](mdc:vite.config.ts)

```ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { fileURLToPath, URL } from 'node:url'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./app', import.meta.url))
    }
  }
})
```

Following this rule keeps imports consistent, readable, and refactor-friendly across the entire codebase.
